#include <iostream>
#include <vector>
#include <thread>
#include <semaphore.h>
#include <unistd.h>

using namespace std;

const int BUFFER_SIZE = 10;
vector<int> buffer(BUFFER_SIZE);

sem_t empty, full, mutex;

void produce(int item) {
    sem_wait(&empty);
    sem_wait(&mutex);
    buffer.push_back(item);
    cout << "Produced item " << item << endl;
    sem_post(&mutex);
    sem_post(&full);
}

void consume() {
    sem_wait(&full);
    sem_wait(&mutex);
    int item = buffer.back();
    buffer.pop_back();
    cout << "Consumed item " << item << endl;
    sem_post(&mutex);
    sem_post(&empty);
}

void producer() {
    for (int i = 0; i < 20; i++) {
        produce(i);
        usleep(100000); // Sleep for 0.1 seconds
    }
}

void consumer() {
    for (int i = 0; i < 20; i++) {
        consume();
        usleep(100000); // Sleep for 0.1 seconds
    }
}

int main() {
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    thread producer_thread(producer);
    thread consumer_thread(consumer);

    producer_thread.join();
    consumer_thread.join();

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
